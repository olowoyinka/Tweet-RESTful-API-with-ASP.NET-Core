// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit;
using System.Threading.Tasks;
using TweetWebApi.EndPoint.Request;
using TweetWebApi.EndPoint.Response;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace TweetWebApi.SDK.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace TweetWebApi.SDK
{
    using TweetWebApi.SDK.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIdentityAPI : IIdentityAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIdentityAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthResponse>> IIdentityAPI.Register(UserRequest userRequest)
        {
            var arguments = new object[] { userRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Register", new Type[] { typeof(UserRequest) });
            return (Task<ApiResponse<AuthResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthResponse>> IIdentityAPI.Login(UserRequest userRequest)
        {
            var arguments = new object[] { userRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(UserRequest) });
            return (Task<ApiResponse<AuthResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthResponse>> IIdentityAPI.RefreshToken(RefreshRequest refreshRequest)
        {
            var arguments = new object[] { refreshRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefreshToken", new Type[] { typeof(RefreshRequest) });
            return (Task<ApiResponse<AuthResponse>>)func(Client, arguments);
        }
    }
}

namespace TweetWebApi.SDK
{
    using TweetWebApi.SDK.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPostAPI : IPostAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPostAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<List<PostResponse>>> IPostAPI.GetAll()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAll", new Type[] {  });
            return (Task<ApiResponse<List<PostResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IPostAPI.Get(Guid postId)
        {
            var arguments = new object[] { postId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IPostAPI.Create(PostRequest postRequest)
        {
            var arguments = new object[] { postRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", new Type[] { typeof(PostRequest) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IPostAPI.Update(Guid postId, PostRequest postRequest)
        {
            var arguments = new object[] { postId, postRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(PostRequest) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<string>> IPostAPI.Delete(Guid postId)
        {
            var arguments = new object[] { postId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<string>>)func(Client, arguments);
        }
    }
}
